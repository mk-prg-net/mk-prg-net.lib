<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="begin_greater_then_end" xml:space="preserve">
    <value>begin größer als end</value>
  </data>
  <data name="begin_starts_later_then_param_i_of_function" xml:space="preserve">
    <value>Parameter {0:D} befindet sich vor dem mit begin ... end definierten Subset von Tokens</value>
  </data>
  <data name="Functionname_null_or_empty" xml:space="preserve">
    <value>Der Funktionsname ist null oder leer</value>
  </data>
  <data name="functiontoken_expected" xml:space="preserve">
    <value>Funktionstoken erwartet</value>
  </data>
  <data name="GetFunction_index_out_of_range" xml:space="preserve">
    <value>Index lag außerhalb des Bereiches von Tokens, oder mit Index referenziertes Token ist keine Funktion</value>
  </data>
  <data name="missing_tokenizer_input_stream" xml:space="preserve">
    <value>Der in Token aufzulösende Datenstrom/String wurde noch nicht definiert</value>
  </data>
  <data name="Null_Ref_Tokens" xml:space="preserve">
    <value>Die Tokens verweisen auf null</value>
  </data>
  <data name="nummeric_expected" xml:space="preserve">
    <value>nummerischer Wert erwarter. Stattdessen erhalten: {0:s}</value>
  </data>
  <data name="tokenizing_failed" xml:space="preserve">
    <value>Beim Tokenisieren ist ein Fehler aufgetreten. Siehe innere Ausnahme.</value>
  </data>
  <data name="ParserHelpler_IndexOfFunctionParameter_Function_Index_out_of_Range" xml:space="preserve">
    <value>Der Index der Funktion, dessen Parameterindex bestimmt werden soll, war außerhalb des gültigen Bereiches</value>
  </data>
  <data name="FunctionSubtreeExpected" xml:space="preserve">
    <value>Ein Funktions- Subtree wurde erwartet</value>
  </data>
  <data name="ParameterSubtreeDontExists" xml:space="preserve">
    <value>Der {0:D}. Parameter existiert nicht. Es kann kein Parameter Subtree bestimmt werden</value>
  </data>
  <data name="range_of_search_starts_inside_parameterlist" xml:space="preserve">
    <value>Der Beginn des Suchbereiches liegt innerhalb der Parameterliste einer Funktion</value>
  </data>
  <data name="EvalErr_InvalidParameterCount" xml:space="preserve">
    <value>Die Anzahl der Parameter für {0:s} ist ungültig.</value>
    <comment>Aufrufen mit: (0)Funkname</comment>
  </data>
  <data name="ErrEval_VariadicParameterlistNotTerminiated" xml:space="preserve">
    <value>Variadische Parameterliste ist nicht mit Lend abgeschlossen worden</value>
  </data>
  <data name="boolean_expected" xml:space="preserve">
    <value>boolscher Wert erwartet. Tatsächlich [0:s}. BoolToken oder die Zeichenketten 'true' und 'false' sind zulässig</value>
  </data>
  <data name="boolean_literal_expected" xml:space="preserve">
    <value>In dem String wurde ein boolsches Literal wie true oder false erwartet</value>
  </data>
  <data name="tokenizing_failed_final_string_delimiter_missing" xml:space="preserve">
    <value>Einem durch Delimiter begrenzten String fehlt der abschließende Delimiter. </value>
  </data>
</root>